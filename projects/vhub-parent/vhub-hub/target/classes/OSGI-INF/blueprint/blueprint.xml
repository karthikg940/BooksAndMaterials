<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
	xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs" xmlns:cxf="http://cxf.apache.org/blueprint/core"
	xmlns:camel="http://camel.apache.org/schema/blueprint" xmlns:camel-cxf="http://camel.apache.org/schema/blueprint/cxf"
	xsi:schemaLocation="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.0.0.xsd
	http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.3.xsd
	http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.16.3-blueprint.xsd">



	<cm:property-placeholder id="placeholder"
		persistent-id="com.virtusa.vhub.vhub-hub">
		<cm:default-properties>
			<cm:property name="queue.consumer1.req" value="VHUB.COMMAND.CONS1.REQ" />
			<cm:property name="queue.consumer1.res" value="VHUB.COMMAND.CONS1.RES" />
			<cm:property name="queue.consumer2.req" value="VHUB.COMMAND.CONS2.REQ" />
			<cm:property name="queue.consumer2.res" value="VHUB.COMMAND.CONS2.RES" />
			<cm:property name="queue.consumer3.req" value="VHUB.COMMAND.CONS3.REQ" />
			<cm:property name="queue.consumer3.res" value="VHUB.COMMAND.CONS3.RES" />
		</cm:default-properties>
	</cm:property-placeholder>
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
		<property name="userName" value="karaf" />
		<property name="password" value="karaf" />
	</bean>


	<bean id="jmscomp" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	<bean id="commandAggregation" class="com.virtusa.vhub.hub.Aggregator"></bean>
	<bean id="csvConverter" class="com.virtusa.vhub.hub.CSVDataFormat"></bean>

	<bean id="jaxbContext" class="javax.xml.bind.JAXBContext"
		factory-method="newInstance">
		<argument>
			<list>
				<value>com.virtusa.vhub.entity.Command</value>
				<value>com.virtusa.vhub.entity.Receive</value>
				<value>com.virtusa.vhub.entity.ResponseList</value>
			</list>
		</argument>
	</bean>

	<bean id="jaxbDataFormat" class="org.apache.camel.converter.jaxb.JaxbDataFormat">
		<argument ref="jaxbContext" />
	</bean>

	<camel-cxf:rsServer id="rsServer" address="/vhub"
		serviceClass="com.virtusa.vhub.hub.CommandRouter">
		<camel-cxf:features>
			<bean class="org.apache.cxf.feature.LoggingFeature" />
		</camel-cxf:features>
	</camel-cxf:rsServer>

	<camelContext id="commandRouterContext"
		xmlns="http://camel.apache.org/schema/blueprint">

		<camel:dataFormats>
			<camel:json id="jsonDataFormat" library="Jackson"/>
			<camel:csv id="CSVDataFormat" useMaps="true" />
<!-- 			<camel:xmljson id="xmlJsonFormat" /> -->
<!-- 			<camel:string/> -->
		</camel:dataFormats>

		<camel:route id="commnandInRoute">
			<camel:from uri="cxfrs://bean://rsServer?bindingStyle=SimpleConsumer" />
			<!-- <camel:marshal ref="jaxbDataFormat" /> -->

			<camel:doTry>
				<camel:to uri="validator:CommandXSD.xsd" id="validateException" />
				<!-- <camel:validate id="checkIfExceptionIsThrownAtHub"> -->
				<!-- <camel:simple>${in.header.ThrowExceptionAtHub} == 'true'</camel:simple> 
					<camel:simple>$simple{header.PreAuthenticated} == 'true'</camel:simple> </camel:validate> -->
				<!-- <camel:marshal ref="jsonDataFormat" /> -->
				<camel:choice>
					<camel:when>
						<camel:simple>$simple{header.CommandType} == 'COMMAND1'</camel:simple>
						<!-- <camel:marshal ref="jsonDataFormat" /> -->
						<camel:to uri="direct:consumer1-in" />
					</camel:when>
					<camel:when>
						<camel:simple>$simple{header.CommandType} == 'COMMAND2'</camel:simple>
						<camel:to uri="direct:consumer2-in" />
					</camel:when>
					<camel:when>
						<camel:simple>$simple{header.CommandType} == 'COMMAND3'</camel:simple>
						<camel:multicast strategyRef="commandAggregation"
							parallelProcessing="true" parallelAggregate="true" streaming="true"
							stopOnException="false" id="multicastCommandToConsumers">
							<camel:to uri="direct:consumer2-in" />
							<camel:to uri="direct:consumer3-in" />
						</camel:multicast>
					</camel:when>
					<camel:otherwise>
						<camel:throwException exceptionType="org.apache.camel.CamelException"
							message="Invalid CommandType $simple{header.CommandType}"></camel:throwException>
						<camel:toD uri="http4://$simple{header.CommandCallbackUrl}" />
					</camel:otherwise>
				</camel:choice>

				<camel:doCatch id="catchValidationException">
					<camel:exception>org.apache.camel.ValidationException</camel:exception>
					<camel:exception>org.apache.camel.processor.validation.SchemaValidationException</camel:exception>
					<camel:to uri="log:Exception?level=ERROR&amp;showAll=true" />
					<camel:bean beanType="com.virtusa.vhub.hub.ExceptionWrapper"
						method="getException($simple{exception})" id="exceptionId"></camel:bean>
				</camel:doCatch>

				<camel:doCatch id="catchOtherCamelExceptions">
					<camel:exception>org.apache.camel.CamelException</camel:exception>
					<camel:to uri="log:Exception?level=ERROR&amp;showAll=true" />
					<camel:bean beanType="com.virtusa.vhub.hub.ExceptionWrapper"
						method="getException($simple{exception})" id="exceptionId">
					</camel:bean>
				</camel:doCatch>

			</camel:doTry>
		</camel:route>

		<camel:route>
			<camel:from uri="direct:consumer1-in" />
			<camel:marshal ref="jaxbDataFormat"></camel:marshal>
			<camel:to
				uri="jmscomp:{{queue.consumer1.req}}?jmsMessageType=Text&amp;replyTo={{queue.consumer1.res}}"
				pattern="InOut" />
			<camel:unmarshal ref="jaxbDataFormat" />
		</camel:route>

		<camel:route>
			<camel:from uri="direct:consumer2-in" />
			<camel:marshal ref="jsonDataFormat"/>
			<camel:to
				uri="jmscomp:{{queue.consumer2.req}}?jmsMessageType=Text&amp;replyTo={{queue.consumer2.res}}"
				pattern="InOut" />
			<camel:unmarshal ref="jaxbDataFormat" />
		</camel:route>

		<camel:route>
			<camel:from uri="direct:consumer3-in" />
			<camel:marshal ref="jaxbDataFormat" />
			<camel:convertBodyTo type="java.util.Map" />
			<camel:marshal ref="CSVDataFormat"/>
			
			<camel:to
				uri="jmscomp:{{queue.consumer3.req}}?jmsMessageType=Text&amp;replyTo={{queue.consumer3.res}}"
				pattern="InOut" />
				
				<camel:unmarshal ref="jaxbDataFormat" />
				<camel:unmarshal ref="CSVDataFormat" />
			<camel:convertBodyTo type="com.virtusa.vhub.entity.Receive"/> 
<!-- 			<camel:unmarshal ref="jaxbDataFormat" /> -->
		</camel:route>
		<camel:route>
			<camel:from
				uri="jmscomp:{{queue.consumer1.res}}?selector=AckType='FINAL'" />
			<camel:toD uri="http4://$simple{header.CommandCallbackUrl}" />
		</camel:route>
		<camel:route>
			<camel:from
				uri="jmscomp:{{queue.consumer2.res}}?selector=AckType='FINAL'" />
			<camel:toD uri="http4://$simple{header.CommandCallbackUrl}" />
		</camel:route>
		<camel:route>
			<camel:from
				uri="jmscomp:{{queue.consumer3.res}}?selector=AckType='FINAL'" />
 <!-- 				<camel:unmarshal ref="CSVDataFormat" /> -->
 <!-- 			<camel:convertBodyTo type="com.virtusa.vhub.entity.Receive"/> --> 
			<camel:toD uri="http4://$simple{header.CommandCallbackUrl}" />
		</camel:route>

	</camelContext>
</blueprint>
